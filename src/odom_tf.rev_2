#!/usr/bin/env python

"""

"""

from math import radians, sin, cos
import rospy, tf
from nav_msgs.msg import Odometry
import socketclient

before = 0
lastupdate = 0
updateinterval = 0.25
pos = [0.0, 0.0, 0.0]

lastbroadcast = 0
broadcastinterval = 0.05
last_odom_quat = tf.transformations.quaternion_from_euler(0, 0, 0)
lastodom = Odometry()


def broadcast(s):
	global before, pos, last_odom_quat, lastodom
	now = rospy.Time.now()
	dt = (now-before).to_sec()
	before = now

	distance = float(s[2])/1000
	delta_x = distance * cos(pos[2])
	delta_y = distance * sin(pos[2]) 
	delta_th = radians(float(s[3]))
	pos[0] += delta_x
	pos[1] += delta_y
	pos[2] += delta_th
	
	# tf
	odom_quat = tf.transformations.quaternion_from_euler(0, 0, pos[2])
	br.sendTransform((pos[0], pos[1], 0), odom_quat, now, "base_link","odom")
	# future
	# quat = tf.transformations.quaternion_from_euler(0, 0, 0)
	# br.sendTransform((0.1, 0, 0.1), quat, now, "laser", "base_link")
	# br.sendTransform((0.1, 0, 0.1), quat, now, "odom", "map")
	
	# odom
	odom = Odometry()
	odom.header.stamp = now
	odom.header.frame_id = "odom"

	#set the position
	odom.pose.pose.position.x = pos[0]
	odom.pose.pose.position.y = pos[1]
	odom.pose.pose.position.z = 0.0
	odom.pose.pose.orientation.x = odom_quat[0]
	odom.pose.pose.orientation.y = odom_quat[1]
	odom.pose.pose.orientation.z = odom_quat[2]
	odom.pose.pose.orientation.w = odom_quat[3]

	#set the velocity
	odom.child_frame_id = "base_link"
	odom.twist.twist.linear.x = distance / dt
	odom.twist.twist.linear.y = 0
	odom.twist.twist.linear.z = 0
	odom.twist.twist.angular.x = 0
	odom.twist.twist.angular.y = 0
	odom.twist.twist.angular.z = delta_th / dt
	
	#publish
	odom_pub.publish(odom)
	
	last_odom_quat = odom_quat
	lastodom = odom


# MAIN

rospy.init_node('odom_tf', anonymous=False)
br = tf.TransformBroadcaster()
odom_pub = rospy.Publisher('odom', Odometry)		
before = rospy.Time.now()
broadcast("* * 0 0".split())


while not rospy.is_shutdown():
	t = rospy.Time.now()
	
	if t.to_sec()-lastupdate > updateinterval: 
		lastupdate = t.to_sec()
		socketclient.sendString("odometryreport")
		s = socketclient.waitForReplySearch("<state> distanceangle ")
		broadcast(s.split())
		lastbroadcast = t.to_sec()
	
	elif t.to_sec() - lastbroadcast > broadcastinterval:
		lastbroadcast = t.to_sec()
		br.sendTransform((pos[0], pos[1], 0), last_odom_quat, t, "base_link","odom")
		lastodom.header.stamp = t
		odom_pub.publish(lastodom)

	else:			
		s = socketclient.replyBufferSearch("<state> distanceangle ")
		if not s=="":
			broadcast(s.split())
			lastbroadcast = t.to_sec()

# shutdown


